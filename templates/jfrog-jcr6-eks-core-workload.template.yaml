AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys JCR into an existing Kubernetes cluster"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  HelmLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
  KubeGetLambdaArn:
    Type: String
  AccessCIDR:
    Type: String
  ArtifactoryLicense1:
    Type: String
  ArtifactoryLicense2:
    Type: String
  ArtifactoryLicense3:
    Type: String
  ArtifactoryLicense4:
    Type: String
  ArtifactoryIAMAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryS3Bucket:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  Certificate:
    Type: String
  CertificateDomain:
    Type: String
  ArtifactoryDBEndpointAddress:
    Type: String
  DatabaseName:
    Type: String
    NoEcho: 'true'
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  MasterKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryVersion:
    Type: String
  ArtifactoryDeploymentSize:
    Type: String
Mappings:
  DeploymentSize:
    Large:
      requestsMem: "6Gi"
      requestsCpu: "4"
      limitsMem: "10Gi"
      limitsCpu: "8"
      javaOptsXms: "6g"
      javaOptsXmx: "8g"
    Medium:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "8Gi"
      limitsCpu: "6"
      javaOptsXms: "4g"
      javaOptsXmx: "6g"
    Small:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "6Gi"
      limitsCpu: "4"
      javaOptsXms: "4g"
      javaOptsXmx: "4g"
Resources:
  NameSpace:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Namespace
        apiVersion: v1
        metadata:
          name: jfrog-artifactory
          labels:
            app: artifactory
  CertificateStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-nginx-tls
          namespace: jfrog-artifactory
          labels:
            app: artifactory
            chart: artifactory
        type: kubernetes.io/tls
        data:
          tls.crt:
            Fn::Base64:
              !Join [ "\n", "Fn::Split": ["|", !Ref Certificate ]]
          tls.key:
            Fn::Base64:
              !Join [ "\n", "Fn::Split": ["|", !Ref CertificateKey ]]
  LicenseStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-cluster-license
          namespace: jfrog-artifactory
          labels:
            app: artifactory
            chart: artifactory
        type: Opaque
        stringData:
          art.lic: !Sub
            >-
            ${ArtifactoryLicense1}


            ${ArtifactoryLicense2}


            ${ArtifactoryLicense3}


            ${ArtifactoryLicense4}
  ArtifactoryDeployment:
    Type: "Custom::Helm"
    DependsOn:
      - LicenseStore
      - CertificateStore
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory
      Name: quickstart-artifactory-jcr
      Chart: jfrog/artifactory-jcr
      RepoUrl: https://charts.jfrog.io
      ValueYaml: !Sub
        - |
          postgresql:
            enabled: false
          artifactory:
            artifactory:
              name: artifactory-jcr
              image:
                repository: docker.bintray.io/jfrog/artifactory-jcr
                version: ${ArtifactoryVersion}
                pullPolicy: Always
              deleteDBPropertiesOnStartup: true
              license:
                secret: artifactory-cluster-license
                dataKey: art.lic
              masterKey: ${MasterKey}
              preStartCommand: "wget -O /opt/jfrog/artifactory/tomcat/lib/mysql-connector-java-5.1.41.jar https://jcenter.bintray.com/mysql/mysql-connector-java/5.1.41/mysql-connector-java-5.1.41.jar"
              persistence:
                enabled: false
                type: aws-s3
                awsS3:
                  endpoint: s3.${AWS::Region}.amazonaws.com
                  region: ${AWS::Region}
                  identity: ${ArtifactoryIAMAcessKey}
                  credential: ${SecretAccessKey}
                  bucketName: ${ArtifactoryS3Bucket}
              primary:
                resources:
                  requests:
                    memory: "${requests_memory}"
                    cpu: "${requests_cpu}"
                  limits:
                    memory: "${limits_memory}"
                    cpu: "${limits_cpu}"
                javaOpts:
                  xms: "${java_xms}"
                  xmx: "${java_xmx}"
                nodeSelector:
                  partition: artifactory-primary
              node:
                replicaCount: 1
                resources:
                  requests:
                    memory: "${requests_memory}"
                    cpu: "${requests_cpu}"
                  limits:
                    memory: "${limits_memory}"
                    cpu: "${limits_cpu}"
                javaOpts:
                  xms: "${java_xms}"
                  xmx: "${java_xmx}"
                nodeSelector:
                  partition: artifactory-secondary
                ## Only used if "affinity" is empty
                podAntiAffinity:
                  ## Valid values are "soft" or "hard"; any other value indicates no anti-affinity
                  type: "soft"
                  topologyKey: "kubernetes.io/hostname"
              postgresql:
                enabled: false
            postgresql:
              enabled: false
            database:
              type: mysql
              url: jdbc:mysql://${ArtifactoryDBEndpointAddress}:3306/${DatabaseName}?characterEncoding=UTF-8&elideSetAutoCommits=true&verifyServerCertificate=false&useSSL=true&requireSSL=true
              user: ${DatabaseUser}
              password: ${DatabasePassword}
            nginx:
              image:
                version: ${ArtifactoryVersion}
              tlsSecretName: artifactory-nginx-tls
              nodeSelector:
                partition: artifactory-primary
              service:
                loadBalancerSourceRanges:  [ "${AccessCIDR}" ]
        - { requests_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsMem],
            requests_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsCpu],
            limits_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsMem ],
            limits_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsCpu ],
            java_xms: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXms ],
            java_xmx: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXmx ] }
  ArtifactoryELBHostName:
    DependsOn: ArtifactoryDeployment
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory
      Name: svc/quickstart-artifactory-jcr-artifactory-nginx
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
Outputs:
  ArtifactoryUrl:
    Value: !Sub https://${ArtifactoryELBHostName}